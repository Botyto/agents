diff --git a/autogen/agentchat/contrib/web_surfer.py b/autogen/agentchat/contrib/web_surfer.py
index af07be6d3..73473f7fd 100644
--- a/autogen/agentchat/contrib/web_surfer.py
+++ b/autogen/agentchat/contrib/web_surfer.py
@@ -136,7 +136,7 @@ def _browser_state() -> Tuple[str, str]:
             description="Perform an INFORMATIONAL web search query then return the search results.",
         )
         def _informational_search(query: Annotated[str, "The informational web search query to perform."]) -> str:
-            self.browser.visit_page(f"bing: {query}")
+            self.browser.visit_page(f"search: {query}")
             header, content = _browser_state()
             return header.strip() + "\n=======================\n" + content
 
@@ -146,7 +146,7 @@ def _informational_search(query: Annotated[str, "The informational web search qu
             description="Perform a NAVIGATIONAL web search query then immediately navigate to the top result. Useful, for example, to navigate to a particular Wikipedia article or other known destination. Equivalent to Google's \"I'm Feeling Lucky\" button.",
         )
         def _navigational_search(query: Annotated[str, "The navigational web search query to perform."]) -> str:
-            self.browser.visit_page(f"bing: {query}")
+            self.browser.visit_page(f"search: {query}")
 
             # Extract the first linl
             m = re.search(r"\[.*?\]\((http.*?)\)", self.browser.page_content)
diff --git a/autogen/browser_utils.py b/autogen/browser_utils.py
index 99e51fcd4..e927ca078 100644
--- a/autogen/browser_utils.py
+++ b/autogen/browser_utils.py
@@ -28,6 +28,66 @@
     pass
 
 
+class WebSearchProvider:
+    def search(self, query: str) -> List[Dict[str, str]]:
+        raise NotImplementedError()
+
+
+class BingSearchProvider(WebSearchProvider):
+    api_key: str
+    base_url: str
+
+    def __init__(self, api_key: str, base_url: str = "https://api.bing.microsoft.com/v7.0/search"):
+        self.api_key = api_key
+        self.base_url = base_url
+
+    def search(self, query: str) -> List[Dict[str, str]]:
+        # Make sure the key was set
+        if self.api_key is None:
+            raise ValueError("Missing Bing API key.")
+
+        # Prepare the request parameters
+        request_kwargs = self.request_kwargs.copy() if self.request_kwargs is not None else {}
+
+        if "headers" not in request_kwargs:
+            request_kwargs["headers"] = {}
+        request_kwargs["headers"]["Ocp-Apim-Subscription-Key"] = self.api_key
+
+        if "params" not in request_kwargs:
+            request_kwargs["params"] = {}
+        request_kwargs["params"]["q"] = query
+        request_kwargs["params"]["textDecorations"] = False
+        request_kwargs["params"]["textFormat"] = "raw"
+
+        request_kwargs["stream"] = False
+
+        # Make the request
+        response = requests.get(self.base_url, **request_kwargs)
+        response.raise_for_status()
+        results = response.json()
+
+        return results  # type: ignore[no-any-return]
+
+
+import duckduckgo_search as ddg
+class DdgSearchProvider(WebSearchProvider):
+    def search(self, query: str) -> List[Dict[str, str]]:
+        client = ddg.DDGS()
+        response = client.text(query)
+        return {
+            "webPages": {
+                "value": [
+                    {
+                        "name": result["title"],
+                        "url": result["href"],
+                        "snippet": result["body"],
+                    }
+                    for result in response[:5]
+                ],
+            },
+        }
+
+
 class SimpleTextBrowser:
     """(In preview) An extremely simple text-based web browser comparable to Lynx. Suitable for Agentic use."""
 
@@ -36,8 +96,7 @@ def __init__(
         start_page: Optional[str] = None,
         viewport_size: Optional[int] = 1024 * 8,
         downloads_folder: Optional[Union[str, None]] = None,
-        bing_base_url: str = "https://api.bing.microsoft.com/v7.0/search",
-        bing_api_key: Optional[Union[str, None]] = None,
+        search_provider: Optional[WebSearchProvider] = None,
         request_kwargs: Optional[Union[Dict[str, Any], None]] = None,
     ):
         self.start_page: str = start_page if start_page else "about:blank"
@@ -48,8 +107,7 @@ def __init__(
         self.viewport_current_page = 0
         self.viewport_pages: List[Tuple[int, int]] = list()
         self.set_address(self.start_page)
-        self.bing_base_url = bing_base_url
-        self.bing_api_key = bing_api_key
+        self.search_provider = search_provider
         self.request_kwargs = request_kwargs
 
         self._page_content = ""
@@ -65,8 +123,8 @@ def set_address(self, uri_or_path: str) -> None:
         # Handle special URIs
         if uri_or_path == "about:blank":
             self._set_page_content("")
-        elif uri_or_path.startswith("bing:"):
-            self._bing_search(uri_or_path[len("bing:") :].strip())
+        elif uri_or_path.startswith("search:"):
+            self._web_search(uri_or_path[len("search:") :].strip())
         else:
             if not uri_or_path.startswith("http:") and not uri_or_path.startswith("https:"):
                 uri_or_path = urljoin(self.address, uri_or_path)
@@ -126,35 +184,14 @@ def _split_pages(self) -> None:
             self.viewport_pages.append((start_idx, end_idx))
             start_idx = end_idx
 
-    def _bing_api_call(self, query: str) -> Dict[str, Dict[str, List[Dict[str, Union[str, Dict[str, str]]]]]]:
-        # Make sure the key was set
-        if self.bing_api_key is None:
-            raise ValueError("Missing Bing API key.")
-
-        # Prepare the request parameters
-        request_kwargs = self.request_kwargs.copy() if self.request_kwargs is not None else {}
-
-        if "headers" not in request_kwargs:
-            request_kwargs["headers"] = {}
-        request_kwargs["headers"]["Ocp-Apim-Subscription-Key"] = self.bing_api_key
-
-        if "params" not in request_kwargs:
-            request_kwargs["params"] = {}
-        request_kwargs["params"]["q"] = query
-        request_kwargs["params"]["textDecorations"] = False
-        request_kwargs["params"]["textFormat"] = "raw"
-
-        request_kwargs["stream"] = False
-
-        # Make the request
-        response = requests.get(self.bing_base_url, **request_kwargs)
-        response.raise_for_status()
-        results = response.json()
-
-        return results  # type: ignore[no-any-return]
+    def _web_search_api_call(self, query: str) -> Dict[str, Dict[str, List[Dict[str, Union[str, Dict[str, str]]]]]]:
+        if self.search_provider is None:
+            raise ValueError("No search provider set.")
+        
+        return self.search_provider.search(query)
 
-    def _bing_search(self, query: str) -> None:
-        results = self._bing_api_call(query)
+    def _web_search(self, query: str) -> None:
+        results = self._web_search_api_call(query)
 
         web_snippets: List[str] = list()
         idx = 0
@@ -177,7 +214,7 @@ def _bing_search(self, query: str) -> None:
         self.page_title = f"{query} - Search"
 
         content = (
-            f"A Bing search for '{query}' found {len(web_snippets) + len(news_snippets)} results:\n\n## Web Results\n"
+            f"A web search for '{query}' found {len(web_snippets) + len(news_snippets)} results:\n\n## Web Results\n"
             + "\n\n".join(web_snippets)
         )
         if len(news_snippets) > 0:
diff --git a/setup.py b/setup.py
index d52a4e7ef..26ff49478 100644
--- a/setup.py
+++ b/setup.py
@@ -30,6 +30,7 @@
     "pydantic>=1.10,<3,!=2.6.0",  # could be both V1 and V2
     "docker",
     "packaging",
+    "duckduckgo-search",
 ]
 
 jupyter_executor = [
